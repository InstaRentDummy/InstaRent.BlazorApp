@page "/cart"
@using Blazored.LocalStorage
@using InstaRent.BlazorApp.Services.Catalog
@using InstaRent.BlazorApp.Services.Payment
@using InstaRent.BlazorApp.Shared.Users
@using InstaRent.Cart.Services
@using InstaRent.Payment.Transactions
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject ICatalogService catalogService
@inject IPaymentService paymentService

<h3>Shopping Cart</h3>
@if (cartDto == null || cartDto.Items.Count <= 0)
{
    <span>You have no items in your cart.</span>
}
else
{
    <EditForm Model="cartDto" OnValidSubmit="PlaceOrder" class="card card-body bg-light mt-2">
    <div>
        @foreach (var item in cartDto.Items)
        {
            <div class="card-group">
                <div class="card-img">
                    <img src="@item.ImageUrls[0]" width="50" height="50" class="img-thumbnail" />
                </div>
                <div class="card-body">
                    <h5>@item.BagName</h5>
                    <span>From @item.StartDate</span>
                    <span>To @item.EndDate</span><br />
                    <button class="btn-delete" @onclick="@(() => DeleteItem(item))">Remove</button>
                </div>
                <div >$@item.price</div>
            </div>
        }
        <div class="item-price">
            Total (@cartDto.Items.Count): $@cartDto.TotalPrice
        </div>
        <div style="text-align: center; margin-top: 10px;">
            <button type="submit" class="btn btn-primary btn-lg">Place Order</button>
        </div>

        <div class="text-align: center; margin-top: 10px;">
             <label class="text-danger">@errorMessage</label>
        </div>
    </div>
    </EditForm>
}

@code {
    CartDto cartDto;
    bool orderPlaced = false;
    string errorMessage = string.Empty;
    UserInfoDto localUser = new();

    protected override async Task OnInitializedAsync()
    {
        localUser = await localStorage.GetItemAsync<UserInfoDto>("user");
        cartDto = await catalogService.GetCartItembyUserIdAsync(localUser.Email);
    }

    private async Task DeleteItem(CartItemDto item)
    {
        await catalogService.RemoveItemFromCartAsync(item.BagId.ToString(), localUser.Email);
        //cartItems = await CartService.GetCartItems();
    }

    private async Task PlaceOrder()
    {
        try
        {
            await localStorage.RemoveItemAsync("payment");

            var transactionDto = await paymentService.PaymentOrder(cartDto, localUser.Email);

            if (transactionDto != null)
            {
                await catalogService.RemoveAllCartAsync(cartDto, localUser.Email);

                await localStorage.SetItemAsync<TransactionDto>("payment", transactionDto);
                NavigationManager.NavigateTo("/Payment");
            }
            else
            {
                errorMessage = "Error occured!";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            //NavigationManager.NavigateTo("/Payment");
        }
    }
}

