@page "/cart"
@using Blazored.LocalStorage
@using InstaRent.BlazorApp.Services.Catalog
@using InstaRent.BlazorApp.Services.Payment
@using InstaRent.BlazorApp.Shared.Users
@using InstaRent.Cart.Services
@using InstaRent.Payment.Transactions
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject ICatalogService catalogService
@inject IPaymentService paymentService

<h3>Shopping Cart</h3>
@if (cartDto == null || cartDto.Items.Count <= 0)
{
    <span>You have no items in your cart.</span>
}
else
{    
    <EditForm Model="cartDto" OnValidSubmit="PlaceOrder" class="card card-body bg-light mt-2">
        <div class="container flex-fill">
            <div class="card">
                
                @foreach (var item in cartDto.Items)
                {
                    <div class="row g-0">
                        <div class="col-md-2">
                            <img src="@item.ImageUrls[0]" class="img-thumbnail rounded-start " alt="...">
                        </div>
                        <div class="col-md-8">
                            <div class="card-body">
                                <h5>@item.BagName</h5>
                                <h6>Rent Period: @item.StartDate.ToShortDateString() - @item.EndDate.ToShortDateString()</h6>
                                
                                <p class="card-text">
                                    No of Days :  @(getNoofDays(@item.StartDate, item.EndDate))

                                </p>
                                @*<Rating Color="Color.Secondary" @bind-Value="@Value" MaxValue="5" />*@
                                <span class="card-text"><strong>S$ @item.price.ToString("N02")</strong></span>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <button type="button" class="btn btn-outline-danger m-3" @onclick="@(() => DeleteItem(item))"><i class="bi bi-dash-circle-fill me-2"></i>Remove</button>
                        </div>
                    </div>
                }

                <div class="card-footer">
                    <div class="item-price">
                        <span class="text-success"><strong>Total (@cartDto.Items.Count) : S$@cartDto.TotalPrice.ToString("N02")</strong></span>
                    </div>
                    <div style=" text-align: center; margin-top: 10px;">
                        <button type="submit" class="btn btn-primary btn-lg">Check Out</button>
                    </div>

                    <div style="text-align: center; margin-top: 10px;">
                        <label class="text-danger">@errorMessage</label>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    CartDto cartDto;
    bool orderPlaced = false;
    int Value = 1;
    string errorMessage = string.Empty;
    UserInfoDto localUser = new();

    protected override async Task OnInitializedAsync()
    {
        localUser = await localStorage.GetItemAsync<UserInfoDto>("user");
        cartDto = await catalogService.GetCartItembyUserIdAsync(localUser.Email);
    }

    private async void DeleteItem(CartItemDto item)
    {
        await catalogService.RemoveItemFromCartAsync(item.BagId.ToString(), localUser.Email);
        cartDto.Items.Remove(item);
        StateHasChanged();
    }


    private async Task PlaceOrder()
    {
        try
        {
            await localStorage.RemoveItemAsync("payment");

            var transactionDto = await paymentService.PaymentOrder(cartDto, localUser.Email);

            if (transactionDto != null)
            {
                await catalogService.RemoveAllCartAsync(cartDto, localUser.Email);

                await localStorage.SetItemAsync<TransactionDto>("payment", transactionDto);
                NavigationManager.NavigateTo("/Payment");
            }
            else
            {
                errorMessage = "Error occured!";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            //NavigationManager.NavigateTo("/Payment");
        }
    }

    private int getNoofDays(DateTime start, DateTime end)
    {
        return (int)(end.Date - start.Date).TotalDays;
    }
}

