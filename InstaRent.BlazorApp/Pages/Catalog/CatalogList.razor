@page "/catalog"
@using Blazored.LocalStorage
@using InstaRent.BlazorApp.Shared.Bags
@using InstaRent.BlazorApp.Services.Catalog
@using InstaRent.BlazorApp.Components
@using InstaRent.BlazorApp.Shared.Dto
@using InstaRent.BlazorApp.Shared.Users
@inject ICatalogService catalogService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILocalStorageService localStorage
@*<h3>Catalog List</h3>*@


<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">

        <div class="dropdown  nav-item">

            <button class="btn btn-secondary dropdown-toggle me-2" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                @ActivePage
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                @foreach (string tabPage in Pages)
                {
                    <li>
                        <a role="button" class="dropdown-item"
                       @onclick=@( () => ActivatePage(tabPage) )>
                            @tabPage
                        </a>
                    </li>

                }
            </ul>
        </div>
        <form class="d-flex w-100">

            <input class="form-control" placeholder="search" @bind="_searchValue" @bind:event="oninput" @onkeypress="@KeyHandler" @onkeypress:preventDefault="shouldPrevent" />

        </form>
    </div>
</nav>
 
<div class="container mt-3">


    @if (catalogService.Bags != null)
    {
        <div class="row gy-4">

            @foreach (var bag in catalogService.Bags.Items)
            {
                <div class="col-sm">
                    <div class="card h-100" style="min-width: 18rem; max-width: 18rem;">
                        <img src="@bag.ImageUrls[0]" class="card-img-top" alt="...">
                        <div class="card-body">
                            <a role="button" @onclick=@( () => ViewDetail(@bag.Id.ToString()) ) class="link-dark stretched-link ">
                                <h6 class="card-subtitle text-dark mb-4"><strong>@bag.BagName</strong></h6>
                            </a>
                            <p class="card-text crop-text-2"> @bag.Description</p> 
                            <div class="d-flex  justify-content-end bd-highlight align-middle">
                                <cite class="text-success p-2">@bag.Status at</cite>
                                <h5 class="badge bg-success rounded-pill p-2">
                                    <i class="bi bi-tag me-1"></i>S$ @bag.Price.ToString("N02")
                                </h5>                                
                            </div>
                            <Rating Color="Color.Primary" @bind-SelectedValue="@bag.AvgRating" MaxValue="5" />
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="m-5">
            <div>
                <InstaRent.BlazorApp.Components.CustomPagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" />
            </div>
        </div>
    }
    else
    {
        <p>Loading....</p>
    }
</div>

@code {

    public string _searchValue { get; set; }
    public MetaData MetaData { get; set; } = new MetaData();
    private PageParameters _pageParameters = new PageParameters() { PageSize = 8 };
    private List<BagInfoDto> bags;
    public string ActivePage { get; set; }
    List<string> Pages = new List<string>() { "Trending", "Popular", "Recommend for you" };

    async Task ActivatePage(string page)
    {
        ActivePage = page;
        await LoadList();        
    }

    int ConvertAverageRate(double? value)
    {
        return 3;  
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    { 

        if (firstRender)
        {
            await ActivatePage("Trending");

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task ViewDetail(string bagid)
    {
        await catalogService.IncreaseViewCount(bagid);
        NavigationManager.NavigateTo($"/Bag/{bagid}");
    }
    private async Task SelectedPage(int page)
    {
        _pageParameters.PageNumber = page;
        await LoadList();
    }

    bool shouldPrevent;
    async void KeyHandler(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            shouldPrevent = true;

            await LoadList();

            StateHasChanged();
        }

        shouldPrevent = false;
    }



    async Task LoadList()
    {
        catalogService.Bags = null;
        var uId = "";
        if (ActivePage == "Recommend for you")
        {

            var localUser = await localStorage.GetItemAsync<UserInfoDto>("user");
            if (localUser != null)
                uId = localUser.Id;
            else
                ActivePage = "Trending";//redirect to default;
        }

        await catalogService.LoadCatalogs(_pageParameters.PageNumber, categoryType: ActivePage, userId: uId, filterText: _searchValue);
        //SelectedValue = 3;
        bags = catalogService.Bags.Items;
        MetaData = catalogService.Bags.Meta;
    }

}
