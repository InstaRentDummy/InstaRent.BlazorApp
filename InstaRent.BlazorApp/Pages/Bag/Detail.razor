@page "/Bag/{id}"
@using Blazored.LocalStorage
@using InstaRent.BlazorApp.Shared.Users
@inject ILocalStorageService localStorage
@using InstaRent.BlazorApp.Shared.Bags
@using InstaRent.BlazorApp.Services.Catalog
@using InstaRent.BlazorApp.Components
@inject ICatalogService catalogService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using BlazorDateRangePicker
@if (bag == null)
{
    <p><em>Loading...</em></p>
}
else
{
    
    <div class="container row">
        <div id="carouselBag" class="carousel slide col-6  d-flex m-2" data-bs-ride="carousel" data-bs-wrap="true" data-bs-pause="false" data-interval="false" style="min-width: 20rem;" >
            <div class="carousel-inner ">
                @{
                    Boolean first = true;
                }
                @foreach (var img in bag.image_urls)
                {
                    <div class="carousel-item @( first ? "active" : "" )">
                        <img src="@img" class="d-block w-100" alt="...">
                    </div>
                }
            </div>
            <button class="carousel-control-prev" type="button" data-bs-target="#carouselBag" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#carouselBag" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
            </button>
        </div>
        <div class="card col-3 d-flex" style="min-width: 20rem;">

            <div class="card-body">
                <h5 class="card-title ">@bag.bag_name</h5>
                <p class="card-text"> @bag.description</p>
                <h5 class="badge bg-success rounded-pill p-3">
                    $@bag.price
                </h5>

                <div class="card border-dark mb-3">
                 
                    <div class="card-body">
                        <h6>Rent Period: </h6> <DateRangePicker d MinDate="DateTimeOffset.Now" MaxDate="@bag.rental_end_date" OnRangeSelect="OnRangeSelect" />
                        <p class="card-text">No of Days : @totalDays</p>
                    </div>
                    <div class="card-body">
                        <h6 class="text-danger">Blackout Period:</h6>
                        @foreach (var blkout in _blackoutDateRange)
                        {
                            <p class="card-text"> @blkout.Start.Date.ToShortDateString() - @blkout.End.Date.ToShortDateString()   </p>
                        }
                    </div>
                    <div class="card-footer text-white bg-dark">
                        Total: <span class="card-text">S$ @totalAmt.ToString("N02")</span>
                        <div class="d-flex justify-content-end">
                            <button class="btn btn-light align-self-end" disabled=@blkAddToCart onclick ="@AddtoCart"><i class="bi bi-cart-plus-fill"></i> <small>@cartBtnName</small> </button>
                        </div>
                    </div>
                    <div class="d-flex p-2">
                        <a href="/cart" class="link-dark">Go to Shopping Cart<i class="bi bi-arrow-right-square-fill ms-2"></i></a>
                    </div>
                </div>
                
               

               
            </div>
        </div>
    </div>



}

@code {
    private string selectedSlide = "2";

    [Parameter]
    public string id { get; set; }
    private int currentIndex = 0;
    private int? cartcount;
    private BagDto bag;
    private int totalDays;
    private double totalAmt;
    private bool blkAddToCart;
    private DateRange _dateRange;
    private List<DateRange> _blackoutDateRange=new List<DateRange>();
    private string cartBtnName;
    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(id))
        {
            var b = await catalogService.GetbyId(id);
            localUser = await localStorage.GetItemAsync<UserInfoDto>("user");
            if (b != null)
            {
                bag = b;
                if (localUser != null)
                {
                    blkAddToCart = await catalogService.CheckExistsInCart(localUser.Email, id) ?? false;
                    if (blkAddToCart)
                        cartBtnName = "Added in Cart";
                    else
                        cartBtnName = "Add to Cart";

                }
            }
            else
            {
                blkAddToCart = false;
                cartBtnName = "Add to Cart";
            }
            _blackoutDateRange = await catalogService.BlackOutDates(id);
        }

        await base.OnInitializedAsync();
        StateHasChanged();
    }

    public void OnRangeSelect(DateRange range)
    {
        foreach(DateRange blkdate in _blackoutDateRange)
        {
            if ((range.Start >= blkdate.Start && range.Start <= blkdate.End) ||
            (range.End >= blkdate.Start && range.End <= blkdate.End) )
            {
                JSRuntime.InvokeVoidAsync("alert", "The selected date is not availble for rent");
                blkAddToCart = true;
                return;
            }
             
        }
        totalDays = (int)(range.End - range.Start).TotalDays;
        totalAmt = bag.price * totalDays;
        _dateRange = range;
        blkAddToCart = false;
    }
    UserInfoDto localUser = new();

    async Task AddtoCart()
    {
        if (_dateRange != null)
        {
           
            if (localUser == null)
            {
                NavigationManager.NavigateTo($"/login");
            }
            else if (localUser.Role == "Renter")
            {
                await JSRuntime.InvokeVoidAsync("alert", "You are now login in as renter account. Please login as lessee!");
            }
            else
            {
                await catalogService.AddToCartAsync(bag, _dateRange, localUser.Email);
                blkAddToCart = true;
                cartBtnName = "Added in Cart";
            }
        }
    }

}
