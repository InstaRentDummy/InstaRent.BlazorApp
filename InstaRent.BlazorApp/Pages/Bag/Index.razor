@page "/Bag/index"
@using InstaRent.BlazorApp.Shared.Bags
@using InstaRent.BlazorApp.Services.Bags
@using InstaRent.BlazorApp.Shared.Dto
@using InstaRent.BlazorApp.Components
@inject IBagService _bagService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>My Bag Listing</h3>


@if (bags == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>
        <button class="btn btn-primary" @onclick="OnAddNew">New Bag</button>
    </p>
    <div class="row col-12">
        <table class="table">
            <thead>
                <tr>
                    <th colspan="4">
                        <div>
                            <input type="radio" id="BagName" @onchange=@(()=>OnValueChange(NameVal)) checked="@(Value==@NameVal)">
                            <label for="BagName">Name</label>|
                            <input type="radio" id="Description" @onchange=@(()=>OnValueChange(DescriptionVal)) checked="@(Value==@DescriptionVal)">
                            <label for="Description">Description</label>|
                            <input type="radio" id="Tags" @onchange=@(()=>OnValueChange(TagsVal)) checked="@(Value==@TagsVal)">
                            <label for="Tags">Tag</label>|
                            <input type="radio" id="Status" @onchange=@(()=>OnValueChange(StatusVal)) checked="@(Value==@StatusVal)">
                            <label for="Status">Status</label>
                        </div>
                    </th>
                </tr>
                <tr>
                    <th colspan="4">
                        <input class="form-control" placeholder="search" @oninput="@(e => OnSearchTextChanged(e, Value))" />
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var info in bags)
                {
                <tr>
                    <th colspan="4"><h4>@info.bag_name</h4></th> 
                </tr>
                <tr>
                    <td>
                        @foreach(var img in info.image_urls)
                        {
                            <img class="m-auto" src="@img" width="50" height="50" alt="@info.bag_name" />
                        }
                        <br>
                        <ul>
                            @foreach (var tag in info.tags)
                            {
                                <li>@tag</li>
                            }
                        </ul>
                    </td>
                    <td>
                        @info.description
                            <br>
                            <div class="m-auto">
                                Start Date: @info.rental_start_date.Date.ToString("yyyyy-MM-dd") |
                                End Date: @info.rental_start_date.Date.ToString("yyyyy-MM-dd")
                            </div>
                    </td>
                    <td colspan="2">
                        <div class="m-auto">
                                @info.status
                                <br>
                                <h5 class="modal-sm">
                                    @info.price SGD
                                </h5>      
                                <br>                                
                                <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => OnEdit(info.Id))">Edit</a> |
                                <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => OnDelete(info))">Delete</a>

                        </div>
                     </td>
                </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="row">
        <div class="col">
            <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" />
        </div>
    </div>
}

@code {
    string NameVal = "Name";
    string DescriptionVal = "Description";
    string TagsVal = "Tags";
    string StatusVal = "Status";

    public MetaData MetaData { get; set; } = new MetaData();
    private PageParameters _pageParameters = new PageParameters() { PageSize = 10};
    private List<BagDto> bags;
    public bool Show { get; set; } = false;
    int _tempId = 0;
    string _name, _description, _tag, _status;

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public string Value { get; set; }

    private void OnValueChange(string val)
    {
        Value = val;
        ValueChanged.InvokeAsync(val);
    }

    void OnAddNew()
    {
        NavigationManager.NavigateTo("/Bag/Add");
    }

    void OnEdit(Guid id)
    {
        NavigationManager.NavigateTo($"/Bag/Edit/{id.ToString()}");
    }

    async void OnDelete(BagDto info)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure to delete the Bag '{info.bag_name}'?"))
            return;

        Show = false;
        var result = await _bagService.Delete(info.Id.ToString());

        if (result.IsSuccessStatusCode)
            await LoadForm();
    }

    private async Task SelectedPage(int page)
    {
        _pageParameters.PageNumber = page;
        await GetData(_pageParameters);
    }

    private async Task LoadForm()
    {
        await Task.Delay(500);

        await GetData(_pageParameters);

        StateHasChanged();
    }

    async void OnSearchTextChanged(ChangeEventArgs changeEventArgs, string columnTitle)
    {
        switch (columnTitle.ToLower())
        {
            case "name":
                _name = changeEventArgs.Value.ToString();
                break;
            case "description":
                _description = changeEventArgs.Value.ToString();
                break;
            case "tags":
                _tag = changeEventArgs.Value.ToString();
                break;
            case "status":
                _status = changeEventArgs.Value.ToString();
                break;
        }

        await GetData(_pageParameters);

        StateHasChanged();
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    products = await Http.GetFromJsonAsync<List<ProductInfo>>("api/product/get");
    //}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Authors - OnAfterRenderAsync - firstRender = " + firstRender);

        if (firstRender)
        {
            await LoadForm();

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    async Task GetData(PageParameters parameters)
    {
        _name = string.IsNullOrEmpty(_name) ? string.Empty : _name;
        _description = string.IsNullOrEmpty(_description) ? string.Empty : _description;
        _tag = string.IsNullOrEmpty(_tag) ? string.Empty : _tag;
        _status = string.IsNullOrEmpty(_status) ? string.Empty : _status;

        await _bagService.GetListByUserId(parameters.PageNumber, "", _name, _description, _tag, _status);
               
        bags = _bagService.Bags.Items;
        MetaData = _bagService.Bags.Meta;
    }

}
