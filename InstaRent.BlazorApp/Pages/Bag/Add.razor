@page "/Bag/Add"
@page "/Bag/Edit/{id}"
@using InstaRent.BlazorApp.Shared.Bags
@using InstaRent.BlazorApp.Shared.Users
@using InstaRent.BlazorApp.Services.Bags
@using InstaRent.BlazorApp.Shared.Dto
@using InstaRent.BlazorApp.Components
@using Blazored.LocalStorage
@inject ILocalStorageService localStorage
@inject IBagService _bagService
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

<h3>Bag Entry</h3>

@if (bag == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="bag" OnValidSubmit="Create" class="card card-body bg-light mt-2">
        <DataAnnotationsValidator />

        @*<div class="col-12 row mt-2">
    <label for="Code" class="col-md-2 col-form-label">Code:</label>
    <div>
    <InputText id="Code" class="form-control" @bind-Value="product.Code" />
    <ValidationMessage For="@(()=> product.Code)" />
    </div>
    </div>*@
        <div class="col-12 row mt-2">
            <label for="Name" class="col-md-2 col-form-label">Name:</label>
            <div>
                <InputText id="Name" class="form-control" @bind-Value="bag.BagName" />
                <ValidationMessage For="@(()=> bag.BagName)" />
            </div>
        </div>
        <div class="col-12 row mt-2">
            <label for="Description" class="col-md-2 col-form-label">Description:</label>
            <div>
                <InputTextArea id="Description" class="form-control" @bind-Value="bag.Description" />
                <ValidationMessage For="@(()=> bag.Description)" />
            </div>
        </div>
        <div class="col-12 row mt-2">
            <label for="Price" class="col-md-2 col-form-label">Price:</label>
            <div>
                <InputNumber id="Price" class="form-control" @bind-Value="bag.Price" />
                <ValidationMessage For="@(()=> bag.Price)" />
            </div>
        </div>
        <div class="col-12 row mt-2">
            <label for="Tags" class="col-md-2 col-form-label">Tags:</label>
            <div>
                <InputText id="tag" class="form-control" @bind-Value="tag" />
                <button type="button" class="btn btn-outline-secondary" @onclick="(() => AddTag(tag))">Add</button>
            </div>
            <br>
            @foreach (var item in bag.Tags)
            {
                <div>
                    <button type="reset" class="btn-outline-secondary" @onclick="(() => RemoveTag(item))">X</button> @item
                </div>
            }
        </div>
        <div class="col-12 row mt-2">
            <label for="StartDate" class="col-md-2 col-form-label">StartDate:</label>
            <div>
                <InputDate id="StartDate" class="form-control" @bind-Value="bag.RentalStartDate" />
            </div>
        </div>
        <div class="col-12 row mt-2">
            <label for="EndDate" class="col-md-2 col-form-label">EndDate:</label>
            <div>
                <InputDate id="EndDate" class="form-control" @bind-Value="bag.RentalEndDate" />
            </div>
        </div>
        <div class="col-12 row mt-2">
            <label for="imageUrl" class="col-md-2 col-form-label">Photo:</label>
            @*<div class="col-md-6">
        <InputFile type="file" title="search image" id="Photo" name="file" OnChange="@OnInputFileChange" />
        </div>
        <div class="col-md-6">
        <img class="rounded m-1" src="@_imageData" />
        </div>*@
            <div>
                <InputText id="imageUrl" class="form-control" @bind-Value="imageUrl" />
                <button type="button" class="btn btn-outline-secondary" @onclick="(() => AddImage(imageUrl))">Add</button>
            </div>
            <br>
            @foreach (var item in bag.ImageUrls)
            {
                <div>
                    <button type="reset" class="btn-outline-secondary" @onclick="(() => RemoveImage(item))">X</button> @item
                </div>
            }
        </div>
        <div class="row mt-2">
            <div class="col-md-12 text-right">
                <button type="submit" class="btn btn-success">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="@Back">Cancel</button>
            </div>
        </div>
    </EditForm>
}
<br />

@code {

    [Parameter]
    public string id { get; set; }

    private UserInfoDto user;
    private BagInfoDto bag;
    private string tag = string.Empty;
    private string imageUrl = string.Empty;
    private string _imageData = string.Empty;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var maxAllowedFiles = 3;
        var format = "image/png";

        //foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
        //{
        //    var resizedImageFile = await imageFile.RequestImageFileAsync(format,
        //        100, 100);
        //    var buffer = new byte[resizedImageFile.Size];
        //    await resizedImageFile.OpenReadStream().ReadAsync(buffer);
        //    product.Photo = $"{Convert.ToBase64String(buffer)}";
        //    _imageData = $"data:{format};base64,{product.Photo}";

        //}
    }

    protected override async Task OnInitializedAsync()
    {
        user = await localStorage.GetItemAsync<UserInfoDto>("user");
        
        bag = new()
            {
                RenterId = user.Email,
                Tags = new(),
                ImageUrls = new(),
                RentalStartDate = DateTime.Now,
                RentalEndDate = DateTime.Now
            };

        if (!string.IsNullOrEmpty(id))
        {
            bag = await _bagService.GetInfoById(id);
            //_imageData = string.IsNullOrEmpty(product.Photo) ? string.Empty : $"data:png;base64,{product.Photo}";
        }
    }

    private async Task Create()
    {
        HttpResponseMessage _response;

        if (string.IsNullOrEmpty(id))
            _response = await _bagService.Create(bag);
        else
            _response = await _bagService.Update(bag);

        if (_response.IsSuccessStatusCode)
            NavigationManager.NavigateTo("/bag/Index");
        else
            await jsRuntime.InvokeVoidAsync("alert", "Error occured!");
    }

    void AddTag(string tag)
    {
        if (!string.IsNullOrEmpty(tag) && !bag.Tags.Contains(tag))
            bag.Tags.Add(tag);

        tag = string.Empty;
    }

    void RemoveTag(string tag)
    {
        bag.Tags.Remove(tag);
    }

    void AddImage(string image)
    {
        if (!string.IsNullOrEmpty(image) && !bag.ImageUrls.Contains(image))
            bag.ImageUrls.Add(image);

        imageUrl = string.Empty;
    }

    void RemoveImage(string image)
    {
        bag.ImageUrls.Remove(image);
    }

    void Back()
    {
        NavigationManager.NavigateTo("/bag/Index");
    }
}
