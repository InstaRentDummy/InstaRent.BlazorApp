@page "/Bag/Add"
@page "/Bag/Edit/{id}"
@using InstaRent.Login.Users
@using InstaRent.BlazorApp.Services.Users
@using InstaRent.BlazorApp.Shared.Dto
@using InstaRent.BlazorApp.Components
@inject IUserService _userService
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

<h3>User Profile</h3>

@if (user == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="user" OnValidSubmit="Create" class="card card-body bg-light mt-2">
        <DataAnnotationsValidator />

        <div class="col-12 row mt-2">
            <label for="Name" class="col-md-2 col-form-label">Name:</label>
            <div>
                <InputText id="Name" class="form-control" @bind-Value="user.Name" />
                <ValidationMessage For="@(()=> user.Name)" />
            </div>
        </div>
        <div class="col-12 row mt-2">
            <label for="Email" class="col-md-2 col-form-label">Description:</label>
            <div>
                <InputTextArea id="Email" class="form-control" @bind-Value="user.Email" />
                <ValidationMessage For="@(()=> user.Email)" />
            </div>
        </div>
        <div class="col-12 row mt-2">
            <label for="Password" class="col-md-2 col-form-label">Price:</label>
            <div>
                <InputNumber id="Password" class="form-control" @bind-Value="user.Password" />
                <ValidationMessage For="@(()=> user.Password)" />
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-12 text-right">
                <button type="submit" class="btn btn-success">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="@Back">Cancel</button>
            </div>
        </div>
    </EditForm>
}
<br />

@code {

    [Parameter]
    public string id { get; set; }

    private UserDto user = new();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(id))
        {
            user = await _userService.GetInfoById(id);
        }
    }

    private async Task Create()
    {
        HttpResponseMessage _response;

        if (string.IsNullOrEmpty(id))
            _response = await _userService.Create(user);
        else
            _response = await _userService.Update(user);

        if (_response.IsSuccessStatusCode)
            NavigationManager.NavigateTo("/bag/Index");
        else
            await jsRuntime.InvokeVoidAsync("alert", "Error has occured!");
    }

    void Back()
    {
        NavigationManager.NavigateTo("../Index");
    }
}
