@page "/User/Add"
@page "/User/Edit/{id}"
@using InstaRent.BlazorApp.Shared.Users
@using InstaRent.BlazorApp.Services.Users
@using InstaRent.BlazorApp.Shared.Dto
@using InstaRent.BlazorApp.Components
@inject IUserService _userService
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

<h3>User Profile</h3>

@if (user == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="user" OnValidSubmit="Create" class="card card-body bg-light mt-2">
        <DataAnnotationsValidator />

        <div class="col-12 row mt-2">
            <label for="Name" class="col-md-2 col-form-label">Name:</label>
            <div>
                <InputText id="Name" class="form-control" @bind-Value="user.Name" />
                <ValidationMessage For="@(()=> user.Name)" />
            </div>
        </div>
        <div class="col-12 row mt-2">
            <label for="Email" class="col-md-2 col-form-label">Email:</label>
            <div>
                <InputText id="Email" type="email" class="form-control" @bind-Value="user.Email" disabled="@disable" />
                <ValidationMessage For="@(()=> user.Email)" />
            </div>
        </div>
        <div >
            <label for="Password" class="col-md-2 col-form-label">Password:</label>
            <div>
                <InputText id="Password" type="password" class="form-control" @bind-Value="user.Password" />
                <ValidationMessage For="@(()=> user.Password)" />
            </div>
        </div>

        <div class="col-12 row mt-2">
            <label for="ConfirmPassword" class="col-md-2 col-form-label">ConfirmPassword:</label>
            <div>
                <InputText id="ConfirmPassword" type="password" class="form-control" @bind-Value="user.ConfirmPassword" />
                <ValidationMessage For="@(()=> user.ConfirmPassword)" />
            </div>
        </div>
        <div >
            <input type="radio" id="Renter" @onchange=@(()=>OnValueChange(RenterVal)) checked="@(user.Role==@RenterVal)" disabled="@disable">
            <label for="Renter">Renter</label> | 
            <input type="radio" id="Lessee" @onchange=@(()=>OnValueChange(LesseeVal)) checked="@(user.Role==@LesseeVal)" disabled="@disable">
            <label for="Lessee">Lessee</label>
        </div>
        <div class="row mt-2">
            <div class="col-md-12 text-right">
                <button type="submit" class="btn btn-success">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="@Back">Cancel</button>
            </div>
        </div>
    </EditForm>
}
<br />

@code {

    [Parameter]
    public string id { get; set; }

    string RenterVal = "Renter";
    string LesseeVal = "Lessee";
    private UserInfoDto user = new();

    bool disable = false;

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    private void OnValueChange(string val)
    {
        user.Role = val;
        ValueChanged.InvokeAsync(val);
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(id))
        {
            user = await _userService.GetInfoById(id);
            disable = true;
        }
    }

    private async Task Create()
    {
        HttpResponseMessage _response;

        if (string.IsNullOrEmpty(id))
            _response = await _userService.Create(user);
        else
            _response = await _userService.Update(user);

        if (_response.IsSuccessStatusCode)
        {
            if (string.IsNullOrEmpty(id))
                NavigationManager.NavigateTo("../Login");
            else
                NavigationManager.NavigateTo("");
        }
        else
            await jsRuntime.InvokeVoidAsync("alert", "Error occured!");
    }

    void Back()
    {
        NavigationManager.NavigateTo("");
    }
}
