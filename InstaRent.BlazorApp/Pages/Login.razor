@page "/login"
@using Blazored.LocalStorage
@using InstaRent.BlazorApp.Shared.Users
@using InstaRent.BlazorApp.Services.Users
@inject ILocalStorageService LocalStorage
@inject IUserService _userService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<h3>Login</h3>

<EditForm Model="loginInfo" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="card" style="min-width: 18rem; max-width: 28rem;">
        <div class="form-check mb-3">
            <label for="username" class="col-form-label">Email</label>
            <div class="col-12 pe-4">
                <InputText id="username" @bind-Value="loginInfo.Email" class="form-control" />
                <ValidationMessage For="@(() => loginInfo.Email)" />
            </div>
        </div>

        <div class="form-check mb-3">
            <label for="password" class="col-form-label">Password</label>
            <div class="col-12 pe-4">
                <InputText id="password" @bind-Value="loginInfo.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => loginInfo.Password)" />
            </div>

        </div>

        <div class="form-check mb-3 row">
            <div class="col-12 text-center">
                <button type="submit" class="btn btn-primary"><i class="bi bi-box-arrow-in-right me-1"></i>Sign in</button>
            </div>
        </div>

        <div class="alert alert-primary" hidden="@(string.IsNullOrEmpty(loginInfo.ErrorMessage))" role="alert">
            @loginInfo.ErrorMessage
        </div>

        <NavLink href="/User/Add" class="mb-3 me-3">
            <h6 class="font-weight-normal text-end me-3">Register account</h6>
        </NavLink>
    </div>
</EditForm>

@code {
    UserInfoDto user = new();
    UserLoginInfoDto loginInfo = new();

    private async void HandleLogin()
    {
        try
        {
            loginInfo.ErrorMessage = "";
            var result = await _userService.Login(loginInfo);

            if (result != null)
            {
                await LocalStorage.SetItemAsync<string>("username", result.Name);
                await LocalStorage.SetItemAsync<UserInfoDto>("user", result);
                //await Task.Delay(1000);

                await AuthStateProvider.GetAuthenticationStateAsync();
                _userService.StateChange();
                
                NavigationManager.NavigateTo("");
            }
            else
            {
                loginInfo.ErrorMessage = "Invalid Email or Password";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            loginInfo.ErrorMessage = ex.Message;
            StateHasChanged();
        }
    }
}
