@using InstaRent.BlazorApp.Shared.Users
@using Blazored.LocalStorage
@using InstaRent.BlazorApp.Services.Users
@using InstaRent.BlazorApp.Services.Catalog
@inject IUserService _userService
@inject ICatalogService _catlogService
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inherits LayoutComponentBase

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 auth">
            <AuthorizeView>
                <NotAuthorized>
                    <a href="login">Login</a>
                </NotAuthorized>
                <Authorized>
                    Welcome back!
                    <a @onclick="UserProfile">@localUser.Name</a>                                        
                    <a @onclick="Logout">Logout</a> 
                    <button type="button" class="btn btn-primary position-relative ms-2">
                        <i class="bi bi-cart-plus-fill"></i><small>Cart</small>
                        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                            @cartItemsCount.ToString()
                            <span class="visually-hidden">unread messages</span>
                        </span>
                    </button>
                </Authorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code{
    UserInfoDto localUser = new();
    int? cartItemsCount;
    protected override async Task OnInitializedAsync()
    {
        localUser = await localStorage.GetItemAsync<UserInfoDto>("user");
        if (localUser != null)
        {
            cartItemsCount = await _catlogService.GetCartItemCountbyUserIdAsync(localUser.Email);
        }
        _userService.OnChange += MenuChanged;
        _catlogService.OnAdd += CartChanged;
    }

    void Dispose()
    {
        _userService.OnChange -= MenuChanged;
    }

    private async void MenuChanged()
    {
        localUser = await localStorage.GetItemAsync<UserInfoDto>("user");
        await InvokeAsync(StateHasChanged);
    }
    private async void CartChanged()
    {
        if (localUser != null)
        {
            cartItemsCount = await _catlogService.GetCartItemCountbyUserIdAsync(localUser.Email);
            await InvokeAsync(StateHasChanged);
        }

    }
    private async void Logout()
    {
        await localStorage.RemoveItemAsync("user");
        await AuthStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo($"");
    }

    private void UserProfile()
    {
        NavigationManager.NavigateTo($"/User/Edit/{localUser.Id}");
    }
}
